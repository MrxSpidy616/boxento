@tailwind base;
@tailwind components;
@tailwind utilities;

/* Basic layout */
:root {
  --border-radius-standard: 2rem;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Global style to prevent any text selection when dragging/resizing occurs */
body.dragging-active {
  -webkit-touch-callout: none !important;
  -webkit-user-select: none !important;
  -khtml-user-select: none !important;
  -moz-user-select: none !important;
  -ms-user-select: none !important;
  user-select: none !important;
  cursor: move !important;
}

/* Widget container - contains styling ONLY for widgets themselves */
.widget-container {
  border-radius: var(--border-radius-standard);
  background-color: white;
  box-shadow: 0 4px 10px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  padding: 1rem;
  overflow: hidden; /* Ensure content never causes overflow */
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  position: relative;
  border: 1px solid rgba(0, 0, 0, 0.05);
  /* Ensure text wrapping */
  word-wrap: break-word;
  word-break: break-word;
  /* Prevent text selection during any interaction */
  -webkit-touch-callout: none; /* iOS Safari */
}

.dark .widget-container {
  background-color: #1f2937; /* dark:bg-gray-800 */
  border: 1px solid rgba(255, 255, 255, 0.05);
}

.widget-container:hover .widget-drag-handle {
  opacity: 1;
}

.widget-drag-handle {
  opacity: 0.8;
  transition: opacity 0.2s;
  cursor: move;
}

.widget-container .settings-button {
  cursor: pointer;
  border-radius: 9999px; /* rounded-full */
}

/* Basic container - completely unstyled */
.grid-item-container {
  padding: 0;
  background: transparent;
  height: 100%;
  width: 100%;
}

/* Base widget styling with enhanced selection prevention */
.react-grid-item {
  transition: all 200ms ease;
  -webkit-user-drag: none; /* Prevent dragging of content */
}

/* Apply selection prevention immediately on mousedown */
.react-grid-item:active,
.react-grid-item:focus {
  user-select: none !important;
}

.react-grid-item:active *,
.react-grid-item:focus * {
  user-select: none !important;
}

/* Specific styling for dragging state */
.react-grid-item.react-draggable-dragging {
  z-index: 100;
  transition: none;
  pointer-events: none;
}

/* Specific styling for resize state */
.react-grid-item.resizing {
  z-index: 10;
  transition: none;
}

/* Comprehensive selection prevention for all interaction states */
.react-grid-item,
.react-grid-item.react-draggable-dragging,
.react-grid-item.resizing {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  touch-action: none;
}

/* Apply to the entire grid */
.react-grid-layout {
  position: relative;
  -webkit-user-drag: none;
}

.react-grid-layout--dragging,
.react-grid-layout--resizing {
  cursor: move;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.react-grid-layout--dragging *,
.react-grid-layout--resizing * {
  cursor: inherit !important;
  -webkit-touch-callout: none !important;
  -webkit-user-select: none !important;
  -khtml-user-select: none !important;
  -moz-user-select: none !important;
  -ms-user-select: none !important;
  user-select: none !important;
}

/* Ensure the placeholder is under the dragged widget */
.react-grid-item.react-grid-placeholder {
  background: #e5e7eb; /* light gray (equivalent to Tailwind's gray-200) */
  opacity: 0.6;
  border-radius: var(--border-radius-standard); /* Match widget-container border-radius */
  transition-duration: 200ms;
  z-index: 1; /* Ensure placeholder is below the widget being manipulated */
}

.dark .react-grid-item.react-grid-placeholder {
  background: #4b5563; /* dark gray (equivalent to Tailwind's gray-600) for dark mode */
}

/* Curved corner resize handle with aggressive styling */
.react-resizable-handle,
.react-resizable .react-resizable-handle,
.react-grid-item .react-resizable-handle {
  position: absolute !important;
  width: 30px !important;
  height: 30px !important;
  bottom: 0 !important;
  right: 0 !important;
  background-image: none !important;
  pointer-events: all !important;
  cursor: se-resize !important;
  z-index: 10 !important;
  opacity: 0 !important; /* Hidden by default */
  transition: opacity 0.3s ease !important; /* Smooth transition */
}

/* Create a larger, more prominent curved corner effect */
.react-resizable-handle::after,
.react-resizable .react-resizable-handle::after,
.react-grid-item .react-resizable-handle::after {
  content: "" !important;
  position: absolute !important;
  bottom: 4px !important;
  right: 4px !important;
  width: 30px !important;
  height: 30px !important;
  border-radius: 0 0 var(--border-radius-standard) 0 !important;
  border-bottom: 2px solid rgba(0, 0, 0, 0.2) !important;
  border-right: 2px solid rgba(0, 0, 0, 0.2) !important;
}

/* Show resize handle on hover */
.widget-container:hover .react-resizable-handle,
.react-grid-item:hover .react-resizable-handle {
  opacity: 1 !important;
}

/* Dark mode version with higher contrast */
.dark .react-resizable-handle::after,
.dark .react-resizable .react-resizable-handle::after,
.dark .react-grid-item .react-resizable-handle::after {
  border-bottom: 2px solid rgba(255, 255, 255, 0.3) !important;
  border-right: 2px solid rgba(255, 255, 255, 0.3) !important;
}

/* Remove these custom classes that might interfere with default behavior */
/* 
.react-grid-item.cssTransforms {
  transition-property: transform;
  transition-duration: 0.2s;
}

.react-grid-item.moving {
  transition: none !important;
}
*/